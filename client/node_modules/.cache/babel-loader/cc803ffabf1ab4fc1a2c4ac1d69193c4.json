{"ast":null,"code":"import _objectSpread from \"/Users/bhaVYa/Desktop/Northeastern/Web Design and User Experience Engineering/React/devconnector/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_COMMENT, ADD_POST, DELETE_POST, GET_POST, GET_POSTS, POST_ERROR, REMOVE_COMMENT, UPDATE_LIKES } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: payload,\n        loading: false\n      });\n\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...state.posts],\n        loading: false\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(post => post._id === payload.id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    case ADD_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: payload\n        })\n      });\n\n    case REMOVE_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: state.post.comments.filter(comment => comment._id === payload)\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/bhaVYa/Desktop/Northeastern/Web Design and User Experience Engineering/React/devconnector/client/src/reducers/post.js"],"names":["ADD_COMMENT","ADD_POST","DELETE_POST","GET_POST","GET_POSTS","POST_ERROR","REMOVE_COMMENT","UPDATE_LIKES","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":";AAAA,SACIA,WADJ,EAEIC,QAFJ,EAGIC,WAHJ,EAIIC,QAJJ,EAKIC,SALJ,EAMIC,UANJ,EAOIC,cAPJ,EAQIC,YARJ,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;AAOA,eAAe,UAASC,KAAK,GAACL,YAAf,EAA6BM,MAA7B,EAAqC;AAAA,QACzCC,IADyC,GACxBD,MADwB,CACzCC,IADyC;AAAA,QACnCC,OADmC,GACxBF,MADwB,CACnCE,OADmC;;AAGhD,UAAOD,IAAP;AACI,SAAKX,SAAL;AACI,+BACOS,KADP;AAEIJ,QAAAA,KAAK,EAAEO,OAFX;AAGIL,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKR,QAAL;AACI,+BACKU,KADL;AAEEH,QAAAA,IAAI,EAAEM,OAFR;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKJ,SAAKV,QAAL;AACI,+BACOY,KADP;AAEIJ,QAAAA,KAAK,EAAE,CAACO,OAAD,EAAU,GAAGH,KAAK,CAACJ,KAAnB,CAFX;AAGIE,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKT,WAAL;AACI,+BACOW,KADP;AAEIJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAxC,CAFX;AAGIL,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKN,UAAL;AACI,+BACOQ,KADP;AAEID,QAAAA,KAAK,EAAEI,OAFX;AAGIL,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKJ,YAAL;AACI,+BACOM,KADP;AAEIJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgBT,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACI,EAArB,qBACvBV,IADuB;AACjBW,UAAAA,KAAK,EAAEL,OAAO,CAACK;AADE,aACMX,IAD9B,CAFX;AAIIC,QAAAA,OAAO,EAAE;AAJb;;AAMJ,SAAKX,WAAL;AACI,+BACOa,KADP;AAEIH,QAAAA,IAAI,oBAAMG,KAAK,CAACH,IAAZ;AAAkBY,UAAAA,QAAQ,EAAEN;AAA5B;AAFR;;AAKJ,SAAKV,cAAL;AACI,+BACKO,KADL;AAEEH,QAAAA,IAAI,oBACGG,KAAK,CAACH,IADT;AAEAY,UAAAA,QAAQ,EAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBL,MAApB,CAA2BM,OAAO,IAAIA,OAAO,CAACL,GAAR,KAAgBF,OAAtD;AAFV;AAFN;;AAMJ;AACK,aAAOH,KAAP;AApDT;AAsDH","sourcesContent":["import {\n    ADD_COMMENT,\n    ADD_POST,\n    DELETE_POST,\n    GET_POST,\n    GET_POSTS,\n    POST_ERROR,\n    REMOVE_COMMENT,\n    UPDATE_LIKES\n} from '../actions/types';\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {}\n};\n\nexport default function(state=initialState, action) {\n    const {type, payload} = action;\n\n    switch(type) {\n        case GET_POSTS:\n            return{\n                ...state,\n                posts: payload,\n                loading: false\n            };\n        case GET_POST:\n            return {\n              ...state,\n              post: payload,\n              loading: false\n            };\n        case ADD_POST:\n            return{\n                ...state,\n                posts: [payload, ...state.posts],\n                loading: false\n            };\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            };\n        case POST_ERROR:\n            return {\n                ...state,\n                error: payload,\n                loading: false\n            };\n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === payload.id?\n                    {...post, likes: payload.likes}: post),\n                loading: false\n            };\n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: {...state.post, comments: payload},\n                \n            };\n        case REMOVE_COMMENT:\n            return {\n              ...state,\n              post: {\n                  ...state.post,\n                  comments: state.post.comments.filter(comment => comment._id === payload)}\n            };\n        default:\n             return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}